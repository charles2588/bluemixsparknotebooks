{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":0}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":1,"description":"take at <console>:33","details":"org.apache.spark.sql.Dataset.take(Dataset.scala:2698)\n$line26.$read$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:33)\n$line26.$read$$iw$$iw$$iw$$iw$$iw.<init>(<console>:39)\n$line26.$read$$iw$$iw$$iw$$iw.<init>(<console>:41)\n$line26.$read$$iw$$iw$$iw.<init>(<console>:43)\n$line26.$read$$iw$$iw.<init>(<console>:45)\n$line26.$read$$iw.<init>(<console>:47)\n$line26.$read.<init>(<console>:49)\n$line26.$read$.<init>(<console>:53)\n$line26.$read$.<clinit>(<console>)\n$line26.$eval$.$print$lzycompute(<console>:7)\n$line26.$eval$.$print(<console>:6)\n$line26.$eval.$print(<console>)\nsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\nscala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:786)\nscala.tools.nsc.interpreter.IMain$Request.loadAndRun(IMain.scala:1047)\nscala.tools.nsc.interpreter.IMain$WrappedRequest$$anonfun$loadAndRunReq$1.apply(IMain.scala:638)","physicalPlanDescription":"== Parsed Logical Plan ==\nGlobalLimit 20\n+- LocalLimit 20\n   +- AnalysisBarrier\n         +- SerializeFromObject [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, input[0, java.lang.String, true], true, false) AS value#317]\n            +- MapPartitions <function1>, obj#316: java.lang.String\n               +- DeserializeToObject createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields), obj#315: org.apache.spark.sql.Row\n                  +- Relation[race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false)\n\n== Analyzed Logical Plan ==\nvalue: string\nGlobalLimit 20\n+- LocalLimit 20\n   +- SerializeFromObject [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, input[0, java.lang.String, true], true, false) AS value#317]\n      +- MapPartitions <function1>, obj#316: java.lang.String\n         +- DeserializeToObject createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields), obj#315: org.apache.spark.sql.Row\n            +- Relation[race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false)\n\n== Optimized Logical Plan ==\nGlobalLimit 20\n+- LocalLimit 20\n   +- SerializeFromObject [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, input[0, java.lang.String, true], true, false) AS value#317]\n      +- MapPartitions <function1>, obj#316: java.lang.String\n         +- DeserializeToObject createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields), obj#315: org.apache.spark.sql.Row\n            +- Relation[race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false)\n\n== Physical Plan ==\nCollectLimit 20\n+- *(2) LocalLimit 20\n   +- *(2) SerializeFromObject [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, input[0, java.lang.String, true], true, false) AS value#317]\n      +- MapPartitions <function1>, obj#316: java.lang.String\n         +- DeserializeToObject createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields), obj#315: org.apache.spark.sql.Row\n            +- *(1) Scan GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false) [race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] PushedFilters: [], ReadSchema: struct<race_duration:int,hc:int,rn:int,type:string,wt:int,r1:int,n_r1:decimal(31,6),d_r1:int,r2:i...","sparkPlanInfo":{"nodeName":"CollectLimit","simpleString":"CollectLimit 20","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"LocalLimit","simpleString":"LocalLimit 20","children":[{"nodeName":"SerializeFromObject","simpleString":"SerializeFromObject [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, input[0, java.lang.String, true], true, false) AS value#317]","children":[{"nodeName":"InputAdapter","simpleString":"InputAdapter","children":[{"nodeName":"MapPartitions","simpleString":"MapPartitions <function1>, obj#316: java.lang.String","children":[{"nodeName":"DeserializeToObject","simpleString":"DeserializeToObject createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields), obj#315: org.apache.spark.sql.Row","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Scan GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false) ","simpleString":"Scan GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false) [race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] PushedFilters: [], ReadSchema: struct<race_duration:int,hc:int,rn:int,type:string,wt:int,r1:int,n_r1:decimal(31,6),d_r1:int,r2:i...","children":[],"metrics":[{"name":"number of output rows","accumulatorId":56,"metricType":"sum"}]}],"metrics":[{"name":"duration total (min, med, max)","accumulatorId":55,"metricType":"timing"}]}],"metrics":[]}],"metrics":[]}],"metrics":[]}],"metrics":[]}],"metrics":[]}],"metrics":[{"name":"duration total (min, med, max)","accumulatorId":54,"metricType":"timing"}]}],"metrics":[]}}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":1}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":2,"description":"head at MissingFields.scala:36","details":"org.apache.spark.sql.Dataset.head(Dataset.scala:2491)\ncom.ibm.analytics.wml.features.adp.MissingFields.fit(MissingFields.scala:36)\ncom.ibm.analytics.wml.features.adp.MissingFields.fit(MissingFields.scala:21)\norg.apache.spark.ml.Pipeline$$anonfun$fit$2.apply(Pipeline.scala:153)\norg.apache.spark.ml.Pipeline$$anonfun$fit$2.apply(Pipeline.scala:149)\nscala.collection.Iterator$class.foreach(Iterator.scala:893)\nscala.collection.AbstractIterator.foreach(Iterator.scala:1336)\nscala.collection.IterableViewLike$Transformed$class.foreach(IterableViewLike.scala:44)\nscala.collection.SeqViewLike$AbstractTransformed.foreach(SeqViewLike.scala:37)\norg.apache.spark.ml.Pipeline.fit(Pipeline.scala:149)\ncom.ibm.analytics.wml.features.ADP.fit(ADP.scala:243)\ncom.ibm.analytics.wml.features.ADP.fit(ADP.scala:151)\norg.apache.spark.ml.Estimator.fit(Estimator.scala:61)\ncom.ibm.analytics.wml.pipeline.spark.computations.EstimatorInPipeline.apply(EstimatorInPipeline.scala:18)\ncom.ibm.analytics.wml.pipeline.spark.computations.EstimatorInPipeline.apply(EstimatorInPipeline.scala:11)\ncom.ibm.analytics.wml.pipeline.flow.Flow$class.nodeOutput(flow.scala:440)\ncom.ibm.analytics.wml.pipeline.spark.MLPipeline.nodeOutput(MLPipeline.scala:85)\ncom.ibm.analytics.wml.pipeline.flow.Flow$$anonfun$run$2.apply(flow.scala:595)\ncom.ibm.analytics.wml.pipeline.flow.Flow$$anonfun$run$2.apply(flow.scala:595)\ncom.ibm.analytics.wml.pipeline.flow.Flow$$anonfun$30.apply(flow.scala:605)","physicalPlanDescription":"== Parsed Logical Plan ==\nGlobalLimit 1\n+- LocalLimit 1\n   +- AnalysisBarrier\n         +- Aggregate [avg(cast(race_duration#209 as bigint)) AS avg(race_duration)#834, avg(cast(hc#210 as bigint)) AS avg(hc)#835, avg(cast(rn#211 as bigint)) AS avg(rn)#836, avg(cast(wt#213 as bigint)) AS avg(wt)#837, avg(cast(r1#214 as bigint)) AS avg(r1)#838, avg(n_r1#215) AS avg(n_r1)#839, avg(cast(d_r1#216 as bigint)) AS avg(d_r1)#840, avg(cast(r2#217 as bigint)) AS avg(r2)#841, avg(cast(r3#220 as bigint)) AS avg(r3)#842, avg(cast(r4#223 as bigint)) AS avg(r4)#843, avg(cast(r5#226 as bigint)) AS avg(r5)#844, avg(n_r5#227) AS avg(n_r5)#845, avg(cast(d_r5#228 as bigint)) AS avg(d_r5)#846, avg(cast(r6#229 as bigint)) AS avg(r6)#847, avg(cast(n_r6#230 as bigint)) AS avg(n_r6)#848, avg(cast(d_r6#231 as bigint)) AS avg(d_r6)#849, avg(cast(r12#247 as bigint)) AS avg(r12)#850, avg(cast(n_r12#248 as bigint)) AS avg(n_r12)#851, avg(cast(d_r12#249 as bigint)) AS avg(d_r12)#852, avg(cast(r13#250 as bigint)) AS avg(r13)#853, avg(cast(r14#253 as bigint)) AS avg(r14)#854, avg(n_r14#254) AS avg(n_r14)#855, avg(cast(d_r14#255 as bigint)) AS avg(d_r14)#856, avg(cast(r15#256 as bigint)) AS avg(r15)#857]\n            +- TypedFilter <function1>, interface org.apache.spark.sql.Row, [StructField(race_duration,IntegerType,true), StructField(hc,IntegerType,true), StructField(rn,IntegerType,true), StructField(type,StringType,true), StructField(wt,IntegerType,true), StructField(r1,IntegerType,true), StructField(n_r1,DecimalType(31,6),true), StructField(d_r1,IntegerType,true), StructField(r2,IntegerType,true), StructField(n_r2,StringType,true), StructField(d_r2,StringType,true), StructField(r3,IntegerType,true), StructField(n_r3,StringType,true), StructField(d_r3,StringType,true), StructField(r4,IntegerType,true), StructField(n_r4,StringType,true), StructField(d_r4,StringType,true), StructField(r5,IntegerType,true), StructField(n_r5,DecimalType(31,6),true), StructField(d_r5,IntegerType,true), StructField(r6,IntegerType,true), StructField(n_r6,IntegerType,true), StructField(d_r6,IntegerType,true), StructField(r7,StringType,true), ... 27 more fields], createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields)\n               +- Sample 0.0, 0.6, false, -6284685554124999397\n                  +- Sort [race_duration#209 ASC NULLS FIRST, hc#210 ASC NULLS FIRST, rn#211 ASC NULLS FIRST, type#212 ASC NULLS FIRST, wt#213 ASC NULLS FIRST, r1#214 ASC NULLS FIRST, n_r1#215 ASC NULLS FIRST, d_r1#216 ASC NULLS FIRST, r2#217 ASC NULLS FIRST, n_r2#218 ASC NULLS FIRST, d_r2#219 ASC NULLS FIRST, r3#220 ASC NULLS FIRST, n_r3#221 ASC NULLS FIRST, d_r3#222 ASC NULLS FIRST, r4#223 ASC NULLS FIRST, n_r4#224 ASC NULLS FIRST, d_r4#225 ASC NULLS FIRST, r5#226 ASC NULLS FIRST, n_r5#227 ASC NULLS FIRST, d_r5#228 ASC NULLS FIRST, r6#229 ASC NULLS FIRST, n_r6#230 ASC NULLS FIRST, d_r6#231 ASC NULLS FIRST, r7#232 ASC NULLS FIRST, ... 27 more fields], false\n                     +- Relation[race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false)\n\n== Analyzed Logical Plan ==\navg(race_duration): double, avg(hc): double, avg(rn): double, avg(wt): double, avg(r1): double, avg(n_r1): decimal(35,10), avg(d_r1): double, avg(r2): double, avg(r3): double, avg(r4): double, avg(r5): double, avg(n_r5): decimal(35,10), avg(d_r5): double, avg(r6): double, avg(n_r6): double, avg(d_r6): double, avg(r12): double, avg(n_r12): double, avg(d_r12): double, avg(r13): double, avg(r14): double, avg(n_r14): decimal(35,10), avg(d_r14): double, avg(r15): double\nGlobalLimit 1\n+- LocalLimit 1\n   +- Aggregate [avg(cast(race_duration#209 as bigint)) AS avg(race_duration)#834, avg(cast(hc#210 as bigint)) AS avg(hc)#835, avg(cast(rn#211 as bigint)) AS avg(rn)#836, avg(cast(wt#213 as bigint)) AS avg(wt)#837, avg(cast(r1#214 as bigint)) AS avg(r1)#838, avg(n_r1#215) AS avg(n_r1)#839, avg(cast(d_r1#216 as bigint)) AS avg(d_r1)#840, avg(cast(r2#217 as bigint)) AS avg(r2)#841, avg(cast(r3#220 as bigint)) AS avg(r3)#842, avg(cast(r4#223 as bigint)) AS avg(r4)#843, avg(cast(r5#226 as bigint)) AS avg(r5)#844, avg(n_r5#227) AS avg(n_r5)#845, avg(cast(d_r5#228 as bigint)) AS avg(d_r5)#846, avg(cast(r6#229 as bigint)) AS avg(r6)#847, avg(cast(n_r6#230 as bigint)) AS avg(n_r6)#848, avg(cast(d_r6#231 as bigint)) AS avg(d_r6)#849, avg(cast(r12#247 as bigint)) AS avg(r12)#850, avg(cast(n_r12#248 as bigint)) AS avg(n_r12)#851, avg(cast(d_r12#249 as bigint)) AS avg(d_r12)#852, avg(cast(r13#250 as bigint)) AS avg(r13)#853, avg(cast(r14#253 as bigint)) AS avg(r14)#854, avg(n_r14#254) AS avg(n_r14)#855, avg(cast(d_r14#255 as bigint)) AS avg(d_r14)#856, avg(cast(r15#256 as bigint)) AS avg(r15)#857]\n      +- TypedFilter <function1>, interface org.apache.spark.sql.Row, [StructField(race_duration,IntegerType,true), StructField(hc,IntegerType,true), StructField(rn,IntegerType,true), StructField(type,StringType,true), StructField(wt,IntegerType,true), StructField(r1,IntegerType,true), StructField(n_r1,DecimalType(31,6),true), StructField(d_r1,IntegerType,true), StructField(r2,IntegerType,true), StructField(n_r2,StringType,true), StructField(d_r2,StringType,true), StructField(r3,IntegerType,true), StructField(n_r3,StringType,true), StructField(d_r3,StringType,true), StructField(r4,IntegerType,true), StructField(n_r4,StringType,true), StructField(d_r4,StringType,true), StructField(r5,IntegerType,true), StructField(n_r5,DecimalType(31,6),true), StructField(d_r5,IntegerType,true), StructField(r6,IntegerType,true), StructField(n_r6,IntegerType,true), StructField(d_r6,IntegerType,true), StructField(r7,StringType,true), ... 27 more fields], createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields)\n         +- Sample 0.0, 0.6, false, -6284685554124999397\n            +- Sort [race_duration#209 ASC NULLS FIRST, hc#210 ASC NULLS FIRST, rn#211 ASC NULLS FIRST, type#212 ASC NULLS FIRST, wt#213 ASC NULLS FIRST, r1#214 ASC NULLS FIRST, n_r1#215 ASC NULLS FIRST, d_r1#216 ASC NULLS FIRST, r2#217 ASC NULLS FIRST, n_r2#218 ASC NULLS FIRST, d_r2#219 ASC NULLS FIRST, r3#220 ASC NULLS FIRST, n_r3#221 ASC NULLS FIRST, d_r3#222 ASC NULLS FIRST, r4#223 ASC NULLS FIRST, n_r4#224 ASC NULLS FIRST, d_r4#225 ASC NULLS FIRST, r5#226 ASC NULLS FIRST, n_r5#227 ASC NULLS FIRST, d_r5#228 ASC NULLS FIRST, r6#229 ASC NULLS FIRST, n_r6#230 ASC NULLS FIRST, d_r6#231 ASC NULLS FIRST, r7#232 ASC NULLS FIRST, ... 27 more fields], false\n               +- Relation[race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false)\n\n== Optimized Logical Plan ==\nGlobalLimit 1\n+- LocalLimit 1\n   +- Aggregate [avg(cast(race_duration#209 as bigint)) AS avg(race_duration)#834, avg(cast(hc#210 as bigint)) AS avg(hc)#835, avg(cast(rn#211 as bigint)) AS avg(rn)#836, avg(cast(wt#213 as bigint)) AS avg(wt)#837, avg(cast(r1#214 as bigint)) AS avg(r1)#838, avg(n_r1#215) AS avg(n_r1)#839, avg(cast(d_r1#216 as bigint)) AS avg(d_r1)#840, avg(cast(r2#217 as bigint)) AS avg(r2)#841, avg(cast(r3#220 as bigint)) AS avg(r3)#842, avg(cast(r4#223 as bigint)) AS avg(r4)#843, avg(cast(r5#226 as bigint)) AS avg(r5)#844, avg(n_r5#227) AS avg(n_r5)#845, avg(cast(d_r5#228 as bigint)) AS avg(d_r5)#846, avg(cast(r6#229 as bigint)) AS avg(r6)#847, avg(cast(n_r6#230 as bigint)) AS avg(n_r6)#848, avg(cast(d_r6#231 as bigint)) AS avg(d_r6)#849, avg(cast(r12#247 as bigint)) AS avg(r12)#850, avg(cast(n_r12#248 as bigint)) AS avg(n_r12)#851, avg(cast(d_r12#249 as bigint)) AS avg(d_r12)#852, avg(cast(r13#250 as bigint)) AS avg(r13)#853, avg(cast(r14#253 as bigint)) AS avg(r14)#854, avg(n_r14#254) AS avg(n_r14)#855, avg(cast(d_r14#255 as bigint)) AS avg(d_r14)#856, avg(cast(r15#256 as bigint)) AS avg(r15)#857]\n      +- Project [race_duration#209, hc#210, rn#211, wt#213, r1#214, n_r1#215, d_r1#216, r2#217, r3#220, r4#223, r5#226, n_r5#227, d_r5#228, r6#229, n_r6#230, d_r6#231, r12#247, n_r12#248, d_r12#249, r13#250, r14#253, n_r14#254, d_r14#255, r15#256]\n         +- TypedFilter <function1>, interface org.apache.spark.sql.Row, [StructField(race_duration,IntegerType,true), StructField(hc,IntegerType,true), StructField(rn,IntegerType,true), StructField(type,StringType,true), StructField(wt,IntegerType,true), StructField(r1,IntegerType,true), StructField(n_r1,DecimalType(31,6),true), StructField(d_r1,IntegerType,true), StructField(r2,IntegerType,true), StructField(n_r2,StringType,true), StructField(d_r2,StringType,true), StructField(r3,IntegerType,true), StructField(n_r3,StringType,true), StructField(d_r3,StringType,true), StructField(r4,IntegerType,true), StructField(n_r4,StringType,true), StructField(d_r4,StringType,true), StructField(r5,IntegerType,true), StructField(n_r5,DecimalType(31,6),true), StructField(d_r5,IntegerType,true), StructField(r6,IntegerType,true), StructField(n_r6,IntegerType,true), StructField(d_r6,IntegerType,true), StructField(r7,StringType,true), ... 27 more fields], createexternalrow(race_duration#209, hc#210, rn#211, type#212.toString, wt#213, r1#214, n_r1#215.toJavaBigDecimal, d_r1#216, r2#217, n_r2#218.toString, d_r2#219.toString, r3#220, n_r3#221.toString, d_r3#222.toString, r4#223, n_r4#224.toString, d_r4#225.toString, r5#226, n_r5#227.toJavaBigDecimal, d_r5#228, r6#229, n_r6#230, d_r6#231, r7#232.toString, ... 78 more fields)\n            +- Sample 0.0, 0.6, false, -6284685554124999397\n               +- Sort [race_duration#209 ASC NULLS FIRST, hc#210 ASC NULLS FIRST, rn#211 ASC NULLS FIRST, type#212 ASC NULLS FIRST, wt#213 ASC NULLS FIRST, r1#214 ASC NULLS FIRST, n_r1#215 ASC NULLS FIRST, d_r1#216 ASC NULLS FIRST, r2#217 ASC NULLS FIRST, n_r2#218 ASC NULLS FIRST, d_r2#219 ASC NULLS FIRST, r3#220 ASC NULLS FIRST, n_r3#221 ASC NULLS FIRST, d_r3#222 ASC NULLS FIRST, r4#223 ASC NULLS FIRST, n_r4#224 ASC NULLS FIRST, d_r4#225 ASC NULLS FIRST, r5#226 ASC NULLS FIRST, n_r5#227 ASC NULLS FIRST, d_r5#228 ASC NULLS FIRST, r6#229 ASC NULLS FIRST, n_r6#230 ASC NULLS FIRST, d_r6#231 ASC NULLS FIRST, r7#232 ASC NULLS FIRST, ... 27 more fields], false\n                  +- Relation[race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false)\n\n== Physical Plan ==\nCollectLimit 1\n+- *(2) LocalLimit 1\n   +- *(2) HashAggregate(keys=[], functions=[avg(cast(race_duration#209 as bigint)), avg(cast(hc#210 as bigint)), avg(cast(rn#211 as bigint)), avg(cast(wt#213 as bigint)), avg(cast(r1#214 as bigint)), avg(n_r1#215), avg(cast(d_r1#216 as bigint)), avg(cast(r2#217 as bigint)), avg(cast(r3#220 as bigint)), avg(cast(r4#223 as bigint)), avg(cast(r5#226 as bigint)), avg(n_r5#227), avg(cast(d_r5#228 as bigint)), avg(cast(r6#229 as bigint)), avg(cast(n_r6#230 as bigint)), avg(cast(d_r6#231 as bigint)), avg(cast(r12#247 as bigint)), avg(cast(n_r12#248 as bigint)), avg(cast(d_r12#249 as bigint)), avg(cast(r13#250 as bigint)), avg(cast(r14#253 as bigint)), avg(n_r14#254), avg(cast(d_r14#255 as bigint)), avg(cast(r15#256 as bigint))], output=[avg(race_duration)#834, avg(hc)#835, avg(rn)#836, avg(wt)#837, avg(r1)#838, avg(n_r1)#839, avg(d_r1)#840, avg(r2)#841, avg(r3)#842, avg(r4)#843, avg(r5)#844, avg(n_r5)#845, avg(d_r5)#846, avg(r6)#847, avg(n_r6)#848, avg(d_r6)#849, avg(r12)#850, avg(n_r12)#851, avg(d_r12)#852, avg(r13)#853, avg(r14)#854, avg(n_r14)#855, avg(d_r14)#856, avg(r15)#857])\n      +- Exchange SinglePartition\n         +- *(1) HashAggregate(keys=[], functions=[partial_avg(cast(race_duration#209 as bigint)), partial_avg(cast(hc#210 as bigint)), partial_avg(cast(rn#211 as bigint)), partial_avg(cast(wt#213 as bigint)), partial_avg(cast(r1#214 as bigint)), partial_avg(n_r1#215), partial_avg(cast(d_r1#216 as bigint)), partial_avg(cast(r2#217 as bigint)), partial_avg(cast(r3#220 as bigint)), partial_avg(cast(r4#223 as bigint)), partial_avg(cast(r5#226 as bigint)), partial_avg(n_r5#227), partial_avg(cast(d_r5#228 as bigint)), partial_avg(cast(r6#229 as bigint)), partial_avg(cast(n_r6#230 as bigint)), partial_avg(cast(d_r6#231 as bigint)), partial_avg(cast(r12#247 as bigint)), partial_avg(cast(n_r12#248 as bigint)), partial_avg(cast(d_r12#249 as bigint)), partial_avg(cast(r13#250 as bigint)), partial_avg(cast(r14#253 as bigint)), partial_avg(n_r14#254), partial_avg(cast(d_r14#255 as bigint)), partial_avg(cast(r15#256 as bigint))], output=[sum#955, count#956L, sum#957, count#958L, sum#959, count#960L, sum#961, count#962L, sum#963, count#964L, sum#965, count#966L, sum#967, count#968L, sum#969, count#970L, sum#971, count#972L, sum#973, count#974L, sum#975, count#976L, sum#977, count#978L, ... 24 more fields])\n            +- *(1) Project [race_duration#209, hc#210, rn#211, wt#213, r1#214, n_r1#215, d_r1#216, r2#217, r3#220, r4#223, r5#226, n_r5#227, d_r5#228, r6#229, n_r6#230, d_r6#231, r12#247, n_r12#248, d_r12#249, r13#250, r14#253, n_r14#254, d_r14#255, r15#256]\n               +- *(1) Filter <function1>.apply\n                  +- *(1) Sample 0.0, 0.6, false, -6284685554124999397\n                     +- *(1) Sort [race_duration#209 ASC NULLS FIRST, hc#210 ASC NULLS FIRST, rn#211 ASC NULLS FIRST, type#212 ASC NULLS FIRST, wt#213 ASC NULLS FIRST, r1#214 ASC NULLS FIRST, n_r1#215 ASC NULLS FIRST, d_r1#216 ASC NULLS FIRST, r2#217 ASC NULLS FIRST, n_r2#218 ASC NULLS FIRST, d_r2#219 ASC NULLS FIRST, r3#220 ASC NULLS FIRST, n_r3#221 ASC NULLS FIRST, d_r3#222 ASC NULLS FIRST, r4#223 ASC NULLS FIRST, n_r4#224 ASC NULLS FIRST, d_r4#225 ASC NULLS FIRST, r5#226 ASC NULLS FIRST, n_r5#227 ASC NULLS FIRST, d_r5#228 ASC NULLS FIRST, r6#229 ASC NULLS FIRST, n_r6#230 ASC NULLS FIRST, d_r6#231 ASC NULLS FIRST, r7#232 ASC NULLS FIRST, ... 27 more fields], false, 0\n                        +- *(1) Scan GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false) [race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] PushedFilters: [], ReadSchema: struct<race_duration:int,hc:int,rn:int,type:string,wt:int,r1:int,n_r1:decimal(31,6),d_r1:int,r2:i...","sparkPlanInfo":{"nodeName":"CollectLimit","simpleString":"CollectLimit 1","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"LocalLimit","simpleString":"LocalLimit 1","children":[{"nodeName":"HashAggregate","simpleString":"HashAggregate(keys=[], functions=[avg(cast(race_duration#209 as bigint)), avg(cast(hc#210 as bigint)), avg(cast(rn#211 as bigint)), avg(cast(wt#213 as bigint)), avg(cast(r1#214 as bigint)), avg(n_r1#215), avg(cast(d_r1#216 as bigint)), avg(cast(r2#217 as bigint)), avg(cast(r3#220 as bigint)), avg(cast(r4#223 as bigint)), avg(cast(r5#226 as bigint)), avg(n_r5#227), avg(cast(d_r5#228 as bigint)), avg(cast(r6#229 as bigint)), avg(cast(n_r6#230 as bigint)), avg(cast(d_r6#231 as bigint)), avg(cast(r12#247 as bigint)), avg(cast(n_r12#248 as bigint)), avg(cast(d_r12#249 as bigint)), avg(cast(r13#250 as bigint)), avg(cast(r14#253 as bigint)), avg(n_r14#254), avg(cast(d_r14#255 as bigint)), avg(cast(r15#256 as bigint))])","children":[{"nodeName":"InputAdapter","simpleString":"InputAdapter","children":[{"nodeName":"Exchange","simpleString":"Exchange SinglePartition","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"HashAggregate","simpleString":"HashAggregate(keys=[], functions=[partial_avg(cast(race_duration#209 as bigint)), partial_avg(cast(hc#210 as bigint)), partial_avg(cast(rn#211 as bigint)), partial_avg(cast(wt#213 as bigint)), partial_avg(cast(r1#214 as bigint)), partial_avg(n_r1#215), partial_avg(cast(d_r1#216 as bigint)), partial_avg(cast(r2#217 as bigint)), partial_avg(cast(r3#220 as bigint)), partial_avg(cast(r4#223 as bigint)), partial_avg(cast(r5#226 as bigint)), partial_avg(n_r5#227), partial_avg(cast(d_r5#228 as bigint)), partial_avg(cast(r6#229 as bigint)), partial_avg(cast(n_r6#230 as bigint)), partial_avg(cast(d_r6#231 as bigint)), partial_avg(cast(r12#247 as bigint)), partial_avg(cast(n_r12#248 as bigint)), partial_avg(cast(d_r12#249 as bigint)), partial_avg(cast(r13#250 as bigint)), partial_avg(cast(r14#253 as bigint)), partial_avg(n_r14#254), partial_avg(cast(d_r14#255 as bigint)), partial_avg(cast(r15#256 as bigint))])","children":[{"nodeName":"Project","simpleString":"Project [race_duration#209, hc#210, rn#211, wt#213, r1#214, n_r1#215, d_r1#216, r2#217, r3#220, r4#223, r5#226, n_r5#227, d_r5#228, r6#229, n_r6#230, d_r6#231, r12#247, n_r12#248, d_r12#249, r13#250, r14#253, n_r14#254, d_r14#255, r15#256]","children":[{"nodeName":"Filter","simpleString":"Filter <function1>.apply","children":[{"nodeName":"Sample","simpleString":"Sample 0.0, 0.6, false, -6284685554124999397","children":[{"nodeName":"Sort","simpleString":"Sort [race_duration#209 ASC NULLS FIRST, hc#210 ASC NULLS FIRST, rn#211 ASC NULLS FIRST, type#212 ASC NULLS FIRST, wt#213 ASC NULLS FIRST, r1#214 ASC NULLS FIRST, n_r1#215 ASC NULLS FIRST, d_r1#216 ASC NULLS FIRST, r2#217 ASC NULLS FIRST, n_r2#218 ASC NULLS FIRST, d_r2#219 ASC NULLS FIRST, r3#220 ASC NULLS FIRST, n_r3#221 ASC NULLS FIRST, d_r3#222 ASC NULLS FIRST, r4#223 ASC NULLS FIRST, n_r4#224 ASC NULLS FIRST, d_r4#225 ASC NULLS FIRST, r5#226 ASC NULLS FIRST, n_r5#227 ASC NULLS FIRST, d_r5#228 ASC NULLS FIRST, r6#229 ASC NULLS FIRST, n_r6#230 ASC NULLS FIRST, d_r6#231 ASC NULLS FIRST, r7#232 ASC NULLS FIRST, ... 27 more fields], false, 0","children":[{"nodeName":"Scan GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false) ","simpleString":"Scan GenericRelation(,Map(source.file_format -> csv, connection.api_key -> Gzvx2AZtkMX5terpNsjcUgbfltk-hg9Ec56eJr1kLcse, connection.resource_instance_id -> crn:v1:bluemix:public:cloud-object-storage:global:a/e1223c9612419fcdeb04816c6aae8dfe:5ef842de-c2ef-4582-9b3a-668c4030ed9b:resource-key:e82a3b02-41a7-48ef-a5cc-3da51d9d8943, connection.region -> eu-geo, connection.url -> https://s3.eu-geo.objectstorage.softlayer.net, source.bucket -> cs0145582-donotdelete-pr-owmybdfodpvrbk, source.file_name -> testdataset1.csv, connection.iam_url -> https://iam.eu-gb.bluemix.net/oidc/token, source.infer_schema -> 1, type -> bluemixcloudobjectstorage),dataworks,false) [race_duration#209,hc#210,rn#211,type#212,wt#213,r1#214,n_r1#215,d_r1#216,r2#217,n_r2#218,d_r2#219,r3#220,n_r3#221,d_r3#222,r4#223,n_r4#224,d_r4#225,r5#226,n_r5#227,d_r5#228,r6#229,n_r6#230,d_r6#231,r7#232,... 27 more fields] PushedFilters: [], ReadSchema: struct<race_duration:int,hc:int,rn:int,type:string,wt:int,r1:int,n_r1:decimal(31,6),d_r1:int,r2:i...","children":[],"metrics":[{"name":"number of output rows","accumulatorId":134,"metricType":"sum"}]}],"metrics":[{"name":"sort time total (min, med, max)","accumulatorId":131,"metricType":"timing"},{"name":"peak memory total (min, med, max)","accumulatorId":132,"metricType":"size"},{"name":"spill size total (min, med, max)","accumulatorId":133,"metricType":"size"}]}],"metrics":[{"name":"number of output rows","accumulatorId":130,"metricType":"sum"}]}],"metrics":[{"name":"number of output rows","accumulatorId":129,"metricType":"sum"}]}],"metrics":[]}],"metrics":[{"name":"spill size total (min, med, max)","accumulatorId":126,"metricType":"size"},{"name":"aggregate time total (min, med, max)","accumulatorId":127,"metricType":"timing"},{"name":"peak memory total (min, med, max)","accumulatorId":125,"metricType":"size"},{"name":"number of output rows","accumulatorId":124,"metricType":"sum"},{"name":"avg hash probe (min, med, max)","accumulatorId":128,"metricType":"average"}]}],"metrics":[{"name":"duration total (min, med, max)","accumulatorId":123,"metricType":"timing"}]}],"metrics":[{"name":"data size total (min, med, max)","accumulatorId":116,"metricType":"size"}]}],"metrics":[]}],"metrics":[{"name":"spill size total (min, med, max)","accumulatorId":120,"metricType":"size"},{"name":"aggregate time total (min, med, max)","accumulatorId":121,"metricType":"timing"},{"name":"peak memory total (min, med, max)","accumulatorId":119,"metricType":"size"},{"name":"number of output rows","accumulatorId":118,"metricType":"sum"},{"name":"avg hash probe (min, med, max)","accumulatorId":122,"metricType":"average"}]}],"metrics":[]}],"metrics":[{"name":"duration total (min, med, max)","accumulatorId":117,"metricType":"timing"}]}],"metrics":[]}}
